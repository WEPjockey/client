import java.nio.file.Paths
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'base'
    id 'com.palantir.git-version' version '0.8.0'
}

version = gitVersion()

evaluationDependsOnChildren()

def binDir = 'bin'
def distDir = 'dist'
def iconDir = 'icons'
def imgDir = 'img'
def libDir = 'lib'
def buildPath = Paths.get(System.getProperty('buildBinPath', project.buildDir.toPath().resolve(binDir).toString()))
def distPath = Paths.get(System.getProperty('buildDistPath', project.buildDir.toPath().resolve(distDir).toString()))

def buildCommonPath = buildPath.resolve('common')
def buildLinuxPath = buildPath.resolve('linux')
def buildWinPath = buildPath.resolve('win')

def winExecPath = project.buildDir.toPath().resolve('launch4j').resolve('hyperbox.exe')

String getPackageName(String os) {
    return "hbox-client-${project.version}-${os}_x64"
}

/-------------------- Binaries build and assembly tasks ------------------------------/

task buildBinJar(type: Copy) {
    dependsOn subprojects.jar

    from project('hbox-client-gui').jar
    from project('hbox-client-core').jar
    into buildCommonPath.resolve(binDir)
}

task buildBinLib(type: Copy) {
    from subprojects.configurations.compile
    into buildCommonPath.resolve(libDir)
}

task buildBinIcons(type: Copy) {
    from project('hbox-client-gui').file(iconDir)
    from project('hbox-client-gui').file(imgDir)
    into buildCommonPath.resolve(iconDir)
}

task buildBinCommon {
    dependsOn buildBinJar, buildBinLib, buildBinIcons

    doLast {
        mkdir "${buildCommonPath}/doc"
        mkdir "${buildCommonPath}/modules"
    }
}

task buildLinux(type: Copy) {
    dependsOn buildBinCommon

    from project.file('scripts/hyperbox')
    from project.file('modules/gui/hyperbox-client.desktop')
    from project.file('scripts/installer/client-installer.sh')
    from buildCommonPath.toString() // using a Path creates a Stack Overflow
    into buildLinuxPath
}

task buildWinExec(type: Exec) {
    dependsOn buildBinCommon

    def launch4jXml = project.buildDir.toPath().resolve('launch4j').resolve('hyperbox.xml')

    doFirst {
        copy {
            from project.file('scripts/launch4j/hyperbox.xml')
            into project.buildDir.toPath().resolve('launch4j')
        }

        ant.replace(
                file: launch4jXml,
                token: '@LAUNCH4J_OUT_FILE@',
                value: winExecPath
        )

        ant.replace(
                file: launch4jXml,
                token: '@LAUNCH4J_JAR@',
                value: "${binDir}/${project('hbox-client-core').jar.archiveName}"
        )
    }

    commandLine '/opt/launch4j/launch4j', launch4jXml
}

task buildWin(type: Copy) {
    dependsOn buildWinExec

    from buildCommonPath.toString() // using a Path creates a Stack Overflow
    from winExecPath.toFile()
    into buildWinPath.toFile()
}

task buildLinuxDefault {
    onlyIf {
        OperatingSystem.current().isLinux()
    }

    buildLinux
}

task buildWinDefault {
    onlyIf {
        OperatingSystem.current().isWindows()
    }

    buildWin
}

build {
    dependsOn buildLinuxDefault, buildWinDefault
}

task buildAll {
    dependsOn buildLinux, buildWin
}

/-------- End of Binaries build and assembly --------/

/-------- Distribution build tasks -----------------/

task distLinuxZip(type: Zip) {
    dependsOn buildLinux

    archiveName = "${getPackageName('linux')}.zip"
    destinationDir = distPath.toFile()

    from buildLinuxPath.toFile()
}

task distLinuxInstall(type: Exec) {
    dependsOn buildLinux

    doFirst {
        mkdir distPath
    }

    commandLine(
            'makeself',
            buildLinuxPath,
            "${distPath}/${getPackageName('linux')}.run",
            'Hyperbox Client',
            './client-installer.sh'
    )
}

task distLinux {
    dependsOn distLinuxZip, distLinuxInstall
}

task dist {
    dependsOn distLinux
}
